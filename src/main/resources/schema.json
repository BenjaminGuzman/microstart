{
  "$id": "https://github.com/BenjaminGuzman/microstart/src/main/resources/schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "required": ["services", "groups"],
  "properties": {
    "services": {
      "type": "array",
      "description": "Array of services the application can run",
      "items": {
        "type": "object",
        "required": ["name", "start"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name. It'll be printed to stdout as prefix for each line received from the service process stdout"
          },
          "start": {
            "type": "string",
            "description": "Command to start the service. You can add bash operators, e.g. \"npm run build && npm run start\" will be run as 'sh -c \"npm run build && npm run start\"' or 'cmd /c \"npm run build && npm run start\"' in windows (it may not work since windows doesn't support && operator)"
          },
          "aliases": {
            "type": "array",
            "description": "List of aliases for the name. With user interactive input these aliases can be useful",
            "items": {
              "type": "string"
            }
          },
          "color": {
            "type": "string",
            "description": "Color in either hex (prefix 0x), octal (prefix 0) or decimal format. If your terminal supports that text color, the service name will have it"
          },
          "workDir": {
            "type": "string",
            "description": "Working directory for the service process. Example: ~/projects/microstart"
          },
          "upPatterns": {
            "type": "array",
            "description": "List of patterns that indicate the service has successfully started",
            "items": {
              "type": "string",
              "description": "Pattern that indicates the service has started. Example: Server is (listening|up|running). Pattern is compiled with CASE_INSENSITIVE option"
            }
          },
          "errorPatterns": {
            "type": "array",
            "description": "List of patterns that indicate the service has had an error while starting up. If a pattern in here appears after the service has started, it'll be totally ignored",
            "items": {
              "type": "string",
              "description": "Pattern that indicates the service has started. Example: errno is [0-9]{1, 2}. Pattern is compiled with CASE_INSENSITIVE option"
            }
          }
        }
      }
    },
    "groups": {
      "type": "array",
      "description": "Groups of services (dependencies)",
      "items": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "Name of the group. For example: crypto. This is the name you need to provide as option or in the interactive input to run the service group"
          },
          "services": {
            "type": "array",
            "description": "List of services required to run in this group. For example: [\"crypto admin\", \"crypto public\"...]",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "List of groups required to be started before this group can be started. Give the name of the group exactly as provided in the group's name field",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}